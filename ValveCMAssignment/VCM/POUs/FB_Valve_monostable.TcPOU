<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Valve_monostable" Id="{960a4f6f-ad56-4762-b13b-5efd91056808}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Valve_monostable
VAR_INPUT
	MaxOpenCloseDuration: INT; //(s) Maximum time the valve needs to open or close in seconds
END_VAR
VAR_OUTPUT
	setOpen: BOOL;
END_VAR
VAR_IN_OUT
	Valve: DUT_VALVE;
	I_O: DUT_IO_Valve;
END_VAR
VAR
	openingTimer: Tc2_Standard.TON;
	closingTimer: Tc2_Standard.TON;
	fbHmiDut: FB_DUT_HMI; 
	manualOpen: BOOL;
	manualClose: BOOL;
	manualReset: BOOL;
	reqOpen: BOOL;
	reqClose: BOOL;
	previousReqOpen: BOOL;
	previousReqClose: BOOL;
	isOpen: BOOL;
	isClosed: BOOL;
	startOpeningTimeOut: BOOL;
	startClosingTimeOut: BOOL;
	ioFailure: BOOL;
	ioStateFailure: BOOL;
	csFailure: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region Input} 
//set INTERNAL variables
// hmi-open command
IF Valve.Hmi.Open THEN
	manualOpen := TRUE;
	Valve.Hmi.Open := FALSE;
END_IF

// hmi-close command
IF Valve.Hmi.Close THEN
	manualClose := TRUE;
	Valve.Hmi.Close := FALSE;
END_IF

// manual_reset command
IF Valve.Hmi.Reset OR manualReset THEN
	manualReset := TRUE;
	Valve.Hmi.Reset := FALSE;
END_IF 			

// Created Utitlities FB's for learning, can also use altenative (simplefied) code here  
// tried to avoid redunant (HMI) logic.
fbHmiDut(hmiValue_in:= Valve.Hmi);
Valve.Hmi := fbHmiDut.hmiValue_out;
	 
//Set HMI modus overide HMI by CS
Valve.Hmi.DisableAutoManual := Valve.Cs.ManualOn OR Valve.Cs.AutoOn;
IF Valve.Cs.ManualOn THEN
	Valve.Hmi.ManualOn := TRUE;
	Valve.Hmi.ManualOff := FALSE;
	Valve.Hmi.AutoOn := FALSE;
	Valve.Hmi.AutoOff := FALSE;
	Valve.Hmi.ModeValue := 0;
END_IF

IF Valve.Cs.AutoOn THEN
	Valve.Hmi.ManualOn := FALSE;
	Valve.Hmi.ManualOff := FALSE;
	Valve.Hmi.AutoOn := TRUE;
	Valve.Hmi.AutoOff := FALSE;
	Valve.Hmi.ModeValue := 1;
END_IF
	  
{endregion input}
	 

{region interlock-manual-auto}
Valve.Sts.InSimulation := Valve.Cs.Simulation OR Valve.Hmi.Simulation; 
Valve.Sts.Interlock := Valve.Cs.Interlock;

// Set Auto/Manual mode
// CS is Dominant over HMI
Valve.Sts.ManualMode S= (Valve.Cs.Manual OR Valve.Hmi.ManualOn) AND NOT(Valve.Cs.Auto);
Valve.Sts.ManualMode R= (Valve.Cs.Auto OR Valve.Hmi.AutoOn) AND NOT(Valve.Cs.Manual);
Valve.Sts.AutoMode:= NOT(Valve.Sts.ManualMode);
{endregion interlock manual auto}

{region control coördination} 
              
// determine the actual or required state
reqOpen S= (Valve.Sts.AutoMode AND Valve.Cs.Open) OR (Valve.Sts.ManualMode AND manualOpen);
reqOpen R= isOpen OR Valve.Sts.Interlock OR previousReqOpen;
reqClose S= Valve.Sts.Interlock OR (Valve.Sts.AutoMode AND Valve.Cs.Close) OR (Valve.Sts.ManualMode AND manualClose);
reqClose R= isClosed OR previousReqClose;
isOpen S= I_O.I_isOpen OR (Valve.Sts.InSimulation AND reqOpen);
isOpen R= NOT (I_O.I_isOpen);	 
isClosed S= I_O.I_isClosed OR (Valve.Sts.InSimulation AND reqClose);
isClosed R= NOT (I_O.I_isClosed);
// arrange rising request signals for opening and closing
previousReqOpen := reqOpen;
previousReqClose := reqClose;
	 
// set state
IF reqClose THEN
    Valve.Sts.State := GVL_VCM.STS_CLOSING;
ELSIF reqOpen THEN
    Valve.Sts.State := GVL_VCM.STS_OPENING;
ELSIF isOpen AND Valve.Sts.State = GVL_VCM.STS_OPENING THEN
    Valve.Sts.State := GVL_VCM.STS_OPEN;
ELSIF isClosed AND Valve.Sts.State = GVL_VCM.STS_CLOSING THEN
    Valve.Sts.State := GVL_VCM.STS_CLOSED;


END_IF

// INIT STS.State zet to CLOSING if UNDEFINED
IF Valve.Sts.State = GVL_VCM.STS_UNDEFINED THEN
	Valve.Sts.State := GVL_VCM.STS_CLOSING;		 
END_IF
		  
CASE Valve.Sts.State OF
    10: //isClosed
        Valve.Sts.Closed := TRUE;
        Valve.Sts.Opening := FALSE;
        Valve.Sts.Open := FALSE;
        Valve.Sts.Closing := FALSE;
    20: //opening
        Valve.Sts.Closed := FALSE;
        Valve.Sts.Opening := TRUE;
        Valve.Sts.Open := FALSE;
        Valve.Sts.Closing := FALSE;
    30: // isOpen
        Valve.Sts.Closed := FALSE;
        Valve.Sts.Opening := FALSE;
        Valve.Sts.Open := TRUE;
        Valve.Sts.Closing := FALSE;
    40: // closing
        Valve.Sts.Closed := FALSE;
        Valve.Sts.Opening := FALSE;
        Valve.Sts.Open := FALSE;
        Valve.Sts.Closing := TRUE;
END_CASE

{endregion}

{region set timer guard for opening and closing}
// Don't use the same timer for opening or closing in case opening or closing is called while previous opening or closing action isn't finished yet.
// Can only be done if a 'DirectionChanged' variable is used. 
//opening timeout guard
startOpeningTimeOut S= NOT (Valve.Sts.Interlock) AND Valve.Sts.Opening;
startOpeningTimeOut R= Valve.Sts.Open OR Valve.Sts.Closing;
openingTimer(IN := startOpeningTimeOut, PT:= INT_TO_TIME(MaxOpenCloseDuration * 1000));
//closing timeout guard
startClosingTimeOut S= Valve.Sts.Interlock OR Valve.Sts.Closing;
startClosingTimeOut R= Valve.Sts.Closed OR Valve.Sts.Opening;
closingTimer(IN := startClosingTimeOut, PT:= INT_TO_TIME(MaxOpenCloseDuration * 1000));

{endregion}

{region Handle alarms}
IF Valve.Cs.Reset OR manualReset THEN
	//reset inAlarm only demand
    Valve.Alm.InAlarm := FALSE;
END_IF
	 
// check if failure(s) (still) exist.
csFailure := (Valve.Cs.Open AND Valve.Cs.Close) OR (Valve.Cs.Manual and Valve.Cs.Auto);
ioStateFailure := (Valve.Sts.Open AND NOT (I_O.I_isOpen)) OR (Valve.Sts.Closed AND NOT (I_O.I_isClosed));
ioFailure := I_O.I_isClosed AND I_O.I_isOpen;	 
Valve.Alm.TimeFailure := openingTimer.Q OR closingTimer.Q; // Set TimeFailure on opening or closing timeOut
Valve.Alm.IsHealthy := I_O.I_isHealthy; // Set GeneralFailure
Valve.Alm.InAlarm := NOT (Valve.Alm.IsHealthy) OR Valve.Alm.TimeFailure OR ioFailure OR ioStateFailure OR Valve.Alm.InAlarm;
{endregion}

{region outputs}
// set/reset output (O_setOpen)
I_O.O_setOpen S= (Valve.Sts.Opening OR Valve.Sts.Open) AND NOT (Valve.Alm.InAlarm); //Warning: Valve is monostable, keep output also open on status: Valve.Sts.Open
I_O.O_setOpen R= Valve.Sts.Closing OR Valve.Sts.Interlock OR Valve.Sts.InSimulation;

{endregion}

{region cleanup state}
	manualClose R= TRUE;
	manualOpen R= TRUE;
	manualReset R= TRUE;
{endregion}
]]></ST>
    </Implementation>
    <LineIds Name="FB_Valve_monostable">
      <LineId Id="1843" Count="67" />
      <LineId Id="1998" Count="0" />
      <LineId Id="1911" Count="0" />
      <LineId Id="1997" Count="0" />
      <LineId Id="1999" Count="0" />
      <LineId Id="1912" Count="61" />
      <LineId Id="1994" Count="0" />
      <LineId Id="1974" Count="0" />
      <LineId Id="2001" Count="0" />
      <LineId Id="1993" Count="0" />
      <LineId Id="1975" Count="17" />
      <LineId Id="36" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>